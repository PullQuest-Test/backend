# .github/workflows/ai-pr-review.yml
name: AI-powered PR Review

on:
  pull_request:
    types: [opened, reopened, synchronize]   # run for every new commit to an open PR
    branches: [main]

jobs:
  ai_review:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      pull-requests: write

    env:
      BACKEND_URL: https://pullquestgithubbackend.onrender.com   # ‚Üê your backend

    steps:
    # 1Ô∏è‚É£  Check out the PR branch (not the synthetic merge commit)
    - name: Checkout PR code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # 2Ô∏è‚É£  Capture the **real** head-commit SHA (not the merge SHA)
    - name: Capture head commit SHA
      id: head
      run: |
        echo "sha=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"

    # 3Ô∏è‚É£  Compute a unified diff (base‚Ä¶HEAD)
    - name: Compute PR diff
      id: diff
      run: |
        git fetch origin ${{ github.event.pull_request.base.ref }}
        git diff origin/${{ github.event.pull_request.base.ref }}...${{ steps.head.outputs.sha }} > diff.txt

    # 4Ô∏è‚É£  Build JSON payload and send it to your backend
    - name: Send diff to backend for AI review & comment
      run: |
        payload=$(jq -n \
          --arg owner   "${{ github.repository_owner }}" \
          --arg repo    "${{ github.event.repository.name }}" \
          --argjson prNumber "${{ github.event.pull_request.number }}" \
          --arg commitId "${{ steps.head.outputs.sha }}" \
          --rawfile diff diff.txt \
          '{ owner:$owner,
             repo:$repo,
             prNumber:$prNumber,
             commitId:$commitId,
             diff:$diff }')
        echo "üì¶ Payload being sent:"
        echo "$payload"

        curl --fail --silent --show-error \
             -X POST "$BACKEND_URL/api/ai-review" \
             -H "Content-Type: application/json" \
             --data-binary "$payload"

    # 5Ô∏è‚É£ (optional) Wait for the backend to leave a PR comment
    - name: Wait for AI review comment
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const owner  = context.repo.owner;
          const repo   = context.repo.repo;
          const prNum  = context.payload.pull_request.number;
          const marker = '## ü§ñ AI Code Review';

          for (let i = 0; i < 12; i++) {
            const { data: comments } = await github.rest.issues.listComments({
              owner, repo, issue_number: prNum
            });
            if (comments.some(c => c.body.startsWith(marker))) {
              console.log('‚úÖ AI review comment detected');
              return;
            }
            console.log(`‚è≥ Waiting (${i+1}/12)‚Ä¶`);
            await new Promise(r => setTimeout(r, 5000));
          }
          core.setFailed('Timed out waiting for AI review comment');

    - name: Done
      if: success()
      run: echo "üéâ Workflow complete ‚Äî AI review comment is present."
